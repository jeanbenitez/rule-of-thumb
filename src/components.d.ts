/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, } from "@stencil/router";
import { RotMenuOption, } from "./components/elements/rot-header/interfaces";
export namespace Components {
    interface AppBlankPage {
        "match": MatchResults;
        "titleName": string;
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface RotButton {
        "theme": "normal" | "invert";
    }
    interface RotHeader {
        "menu": RotMenuOption[];
        "search": boolean;
        "titleName": string;
    }
    interface RotIcon {
        "icon": string;
    }
    interface RotMainRuling {
        "person": {
            name: string;
            image: string;
            description: string;
            extras: {
                moreInfoLink: string;
                questionOpening: string;
                veredictQuestion: string;
            };
            expireDate: Date;
        };
    }
    interface RotMainRulingCard {
        "person": any;
    }
}
declare global {
    interface HTMLAppBlankPageElement extends Components.AppBlankPage, HTMLStencilElement {
    }
    var HTMLAppBlankPageElement: {
        prototype: HTMLAppBlankPageElement;
        new (): HTMLAppBlankPageElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLRotButtonElement extends Components.RotButton, HTMLStencilElement {
    }
    var HTMLRotButtonElement: {
        prototype: HTMLRotButtonElement;
        new (): HTMLRotButtonElement;
    };
    interface HTMLRotHeaderElement extends Components.RotHeader, HTMLStencilElement {
    }
    var HTMLRotHeaderElement: {
        prototype: HTMLRotHeaderElement;
        new (): HTMLRotHeaderElement;
    };
    interface HTMLRotIconElement extends Components.RotIcon, HTMLStencilElement {
    }
    var HTMLRotIconElement: {
        prototype: HTMLRotIconElement;
        new (): HTMLRotIconElement;
    };
    interface HTMLRotMainRulingElement extends Components.RotMainRuling, HTMLStencilElement {
    }
    var HTMLRotMainRulingElement: {
        prototype: HTMLRotMainRulingElement;
        new (): HTMLRotMainRulingElement;
    };
    interface HTMLRotMainRulingCardElement extends Components.RotMainRulingCard, HTMLStencilElement {
    }
    var HTMLRotMainRulingCardElement: {
        prototype: HTMLRotMainRulingCardElement;
        new (): HTMLRotMainRulingCardElement;
    };
    interface HTMLElementTagNameMap {
        "app-blank-page": HTMLAppBlankPageElement;
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "rot-button": HTMLRotButtonElement;
        "rot-header": HTMLRotHeaderElement;
        "rot-icon": HTMLRotIconElement;
        "rot-main-ruling": HTMLRotMainRulingElement;
        "rot-main-ruling-card": HTMLRotMainRulingCardElement;
    }
}
declare namespace LocalJSX {
    interface AppBlankPage {
        "match"?: MatchResults;
        "titleName"?: string;
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface RotButton {
        "theme"?: "normal" | "invert";
    }
    interface RotHeader {
        "menu"?: RotMenuOption[];
        "search"?: boolean;
        "titleName"?: string;
    }
    interface RotIcon {
        "icon": string;
    }
    interface RotMainRuling {
        "person"?: {
            name: string;
            image: string;
            description: string;
            extras: {
                moreInfoLink: string;
                questionOpening: string;
                veredictQuestion: string;
            };
            expireDate: Date;
        };
    }
    interface RotMainRulingCard {
        "person"?: any;
    }
    interface IntrinsicElements {
        "app-blank-page": AppBlankPage;
        "app-home": AppHome;
        "app-root": AppRoot;
        "rot-button": RotButton;
        "rot-header": RotHeader;
        "rot-icon": RotIcon;
        "rot-main-ruling": RotMainRuling;
        "rot-main-ruling-card": RotMainRulingCard;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-blank-page": LocalJSX.AppBlankPage & JSXBase.HTMLAttributes<HTMLAppBlankPageElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "rot-button": LocalJSX.RotButton & JSXBase.HTMLAttributes<HTMLRotButtonElement>;
            "rot-header": LocalJSX.RotHeader & JSXBase.HTMLAttributes<HTMLRotHeaderElement>;
            "rot-icon": LocalJSX.RotIcon & JSXBase.HTMLAttributes<HTMLRotIconElement>;
            "rot-main-ruling": LocalJSX.RotMainRuling & JSXBase.HTMLAttributes<HTMLRotMainRulingElement>;
            "rot-main-ruling-card": LocalJSX.RotMainRulingCard & JSXBase.HTMLAttributes<HTMLRotMainRulingCardElement>;
        }
    }
}
