/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, } from "@stencil/router";
import { RotMenuOption, } from "./components/elements/rot-header/interfaces";
import { ROTPersonType, ROTVoteEvent, } from "./storage/interfaces";
export namespace Components {
    interface AppBlankPage {
        "match": MatchResults;
        "titleName": string;
    }
    interface AppHome {
    }
    interface AppRoot {
        "path": string;
    }
    interface RotButton {
        "theme": "normal" | "invert" | "text";
    }
    interface RotFooter {
    }
    interface RotHeader {
        "menu": RotMenuOption[];
        "path": string;
        "search": boolean;
        "titleName": string;
    }
    interface RotIcon {
        "icon": string;
        "theme": "up" | "down";
    }
    interface RotMainRuling {
    }
    interface RotMainRulingCard {
        "person": ROTPersonType;
    }
    interface RotMessageBanner {
    }
    interface RotSubmitNameBanner {
    }
    interface RotVoteCard {
        "person": ROTPersonType;
    }
    interface RotVoteCards {
    }
    interface RotVotesScorebar {
        "votes": ROTPersonType["votes"];
    }
}
declare global {
    interface HTMLAppBlankPageElement extends Components.AppBlankPage, HTMLStencilElement {
    }
    var HTMLAppBlankPageElement: {
        prototype: HTMLAppBlankPageElement;
        new (): HTMLAppBlankPageElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLRotButtonElement extends Components.RotButton, HTMLStencilElement {
    }
    var HTMLRotButtonElement: {
        prototype: HTMLRotButtonElement;
        new (): HTMLRotButtonElement;
    };
    interface HTMLRotFooterElement extends Components.RotFooter, HTMLStencilElement {
    }
    var HTMLRotFooterElement: {
        prototype: HTMLRotFooterElement;
        new (): HTMLRotFooterElement;
    };
    interface HTMLRotHeaderElement extends Components.RotHeader, HTMLStencilElement {
    }
    var HTMLRotHeaderElement: {
        prototype: HTMLRotHeaderElement;
        new (): HTMLRotHeaderElement;
    };
    interface HTMLRotIconElement extends Components.RotIcon, HTMLStencilElement {
    }
    var HTMLRotIconElement: {
        prototype: HTMLRotIconElement;
        new (): HTMLRotIconElement;
    };
    interface HTMLRotMainRulingElement extends Components.RotMainRuling, HTMLStencilElement {
    }
    var HTMLRotMainRulingElement: {
        prototype: HTMLRotMainRulingElement;
        new (): HTMLRotMainRulingElement;
    };
    interface HTMLRotMainRulingCardElement extends Components.RotMainRulingCard, HTMLStencilElement {
    }
    var HTMLRotMainRulingCardElement: {
        prototype: HTMLRotMainRulingCardElement;
        new (): HTMLRotMainRulingCardElement;
    };
    interface HTMLRotMessageBannerElement extends Components.RotMessageBanner, HTMLStencilElement {
    }
    var HTMLRotMessageBannerElement: {
        prototype: HTMLRotMessageBannerElement;
        new (): HTMLRotMessageBannerElement;
    };
    interface HTMLRotSubmitNameBannerElement extends Components.RotSubmitNameBanner, HTMLStencilElement {
    }
    var HTMLRotSubmitNameBannerElement: {
        prototype: HTMLRotSubmitNameBannerElement;
        new (): HTMLRotSubmitNameBannerElement;
    };
    interface HTMLRotVoteCardElement extends Components.RotVoteCard, HTMLStencilElement {
    }
    var HTMLRotVoteCardElement: {
        prototype: HTMLRotVoteCardElement;
        new (): HTMLRotVoteCardElement;
    };
    interface HTMLRotVoteCardsElement extends Components.RotVoteCards, HTMLStencilElement {
    }
    var HTMLRotVoteCardsElement: {
        prototype: HTMLRotVoteCardsElement;
        new (): HTMLRotVoteCardsElement;
    };
    interface HTMLRotVotesScorebarElement extends Components.RotVotesScorebar, HTMLStencilElement {
    }
    var HTMLRotVotesScorebarElement: {
        prototype: HTMLRotVotesScorebarElement;
        new (): HTMLRotVotesScorebarElement;
    };
    interface HTMLElementTagNameMap {
        "app-blank-page": HTMLAppBlankPageElement;
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "rot-button": HTMLRotButtonElement;
        "rot-footer": HTMLRotFooterElement;
        "rot-header": HTMLRotHeaderElement;
        "rot-icon": HTMLRotIconElement;
        "rot-main-ruling": HTMLRotMainRulingElement;
        "rot-main-ruling-card": HTMLRotMainRulingCardElement;
        "rot-message-banner": HTMLRotMessageBannerElement;
        "rot-submit-name-banner": HTMLRotSubmitNameBannerElement;
        "rot-vote-card": HTMLRotVoteCardElement;
        "rot-vote-cards": HTMLRotVoteCardsElement;
        "rot-votes-scorebar": HTMLRotVotesScorebarElement;
    }
}
declare namespace LocalJSX {
    interface AppBlankPage {
        "match"?: MatchResults;
        "titleName"?: string;
    }
    interface AppHome {
    }
    interface AppRoot {
        "path"?: string;
    }
    interface RotButton {
        "theme"?: "normal" | "invert" | "text";
    }
    interface RotFooter {
    }
    interface RotHeader {
        "menu"?: RotMenuOption[];
        "path"?: string;
        "search"?: boolean;
        "titleName"?: string;
    }
    interface RotIcon {
        "icon": string;
        "theme"?: "up" | "down";
    }
    interface RotMainRuling {
    }
    interface RotMainRulingCard {
        "person": ROTPersonType;
    }
    interface RotMessageBanner {
    }
    interface RotSubmitNameBanner {
    }
    interface RotVoteCard {
        "onVote"?: (event: CustomEvent<ROTVoteEvent>) => void;
        "person"?: ROTPersonType;
    }
    interface RotVoteCards {
    }
    interface RotVotesScorebar {
        "votes"?: ROTPersonType["votes"];
    }
    interface IntrinsicElements {
        "app-blank-page": AppBlankPage;
        "app-home": AppHome;
        "app-root": AppRoot;
        "rot-button": RotButton;
        "rot-footer": RotFooter;
        "rot-header": RotHeader;
        "rot-icon": RotIcon;
        "rot-main-ruling": RotMainRuling;
        "rot-main-ruling-card": RotMainRulingCard;
        "rot-message-banner": RotMessageBanner;
        "rot-submit-name-banner": RotSubmitNameBanner;
        "rot-vote-card": RotVoteCard;
        "rot-vote-cards": RotVoteCards;
        "rot-votes-scorebar": RotVotesScorebar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-blank-page": LocalJSX.AppBlankPage & JSXBase.HTMLAttributes<HTMLAppBlankPageElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "rot-button": LocalJSX.RotButton & JSXBase.HTMLAttributes<HTMLRotButtonElement>;
            "rot-footer": LocalJSX.RotFooter & JSXBase.HTMLAttributes<HTMLRotFooterElement>;
            "rot-header": LocalJSX.RotHeader & JSXBase.HTMLAttributes<HTMLRotHeaderElement>;
            "rot-icon": LocalJSX.RotIcon & JSXBase.HTMLAttributes<HTMLRotIconElement>;
            "rot-main-ruling": LocalJSX.RotMainRuling & JSXBase.HTMLAttributes<HTMLRotMainRulingElement>;
            "rot-main-ruling-card": LocalJSX.RotMainRulingCard & JSXBase.HTMLAttributes<HTMLRotMainRulingCardElement>;
            "rot-message-banner": LocalJSX.RotMessageBanner & JSXBase.HTMLAttributes<HTMLRotMessageBannerElement>;
            "rot-submit-name-banner": LocalJSX.RotSubmitNameBanner & JSXBase.HTMLAttributes<HTMLRotSubmitNameBannerElement>;
            "rot-vote-card": LocalJSX.RotVoteCard & JSXBase.HTMLAttributes<HTMLRotVoteCardElement>;
            "rot-vote-cards": LocalJSX.RotVoteCards & JSXBase.HTMLAttributes<HTMLRotVoteCardsElement>;
            "rot-votes-scorebar": LocalJSX.RotVotesScorebar & JSXBase.HTMLAttributes<HTMLRotVotesScorebarElement>;
        }
    }
}
